rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rule for user profile data. Only the user can read/write their own document.
    match /usuarios/{userId} {
      allow read, write: if request.auth.uid == userId;
    }

    // Rule for user's favorites, a subcollection under their profile.
    match /usuarios/{userId}/user_favorites/{favoriteId} {
      allow read, write, delete: if request.auth.uid == userId;
    }

    // Rule for user's training sessions.
    match /mis_sesiones/{sesionId} {
      // Allow reading (get), updating, and deleting a session if the user is the owner.
      allow get, update, delete: if request.auth.uid == resource.data.userId;
      
      // Allow listing sessions for any authenticated user.
      // The client code MUST enforce security by querying only for the user's own sessions
      // using `where("userId", "==", user.uid)`. The app already does this.
      allow list: if request.auth != null;
      
      // Allow creating a session if the new session's userId matches the user's ID.
      allow create: if request.auth.uid == request.resource.data.userId;
    }

    // Rule for the public library of exercises.
    match /ejercicios_futsal/{ejercicioId} {
      // Anyone can read exercises.
      allow read: if true;
      
      // Only users with an 'admin' role in their user document can write.
      allow write, delete, update: if request.auth != null 
                                     && get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
